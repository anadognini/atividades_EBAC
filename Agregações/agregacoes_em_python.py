# -*- coding: utf-8 -*-
"""agregacoes_em_python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ERtqdbqBX9XP9yYmPwYkwbVVQTsuJAIv
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt


sns.set_theme()
# %matplotlib inline

sinasc_raw = pd.read_csv('SINASC_RO_2019.csv')
sinasc_raw.head()

sinasc_1 = sinasc_raw[['ESCMAE', 'IDADEMAE']]
sinasc_1.head()

sinasc_1.groupby('ESCMAE').count()
# Dataframe

sinasc_1.groupby('ESCMAE')['IDADEMAE'].count()
# Série

# Transformando sinasc_1.groupby('ESCMAE') em uma variável para poder trabalhar
# com ela. Assim, podemos aplicar qualquer tipo de agregação a esse objeto.

esc_mae = sinasc_1.groupby('ESCMAE')

# Aplicando média

esc_mae.mean()

# Aplicando count

esc_mae.count()

# Aplicando soma

esc_mae.sum()

"""#### Anos de estudo da mãe (ESCMAE) X Idade mediana da mãe (IDADEMAE) X Idade mediana do pai (IDADEPAI) - Como agrupar?"""

# Selecionando as três colunas

sinasc_2 = sinasc_raw[['ESCMAE', 'IDADEMAE','IDADEPAI']]
sinasc_2.head()

sinasc_2.shape

# Missing values em relação à idade da mãe - quantos bebês?

sinasc_2.IDADEMAE.isna().sum()

# Missing values em relação à idade do pai - quantos bebês?

sinasc_2.IDADEPAI.isna().sum()

# Proporção de bebês sem a idade do pai no registro

19421/27028 * 100

sinasc_2_limpo = sinasc_2.dropna()
sinasc_2_limpo.shape

# Calcular a idade mediana do pai e da mãe para visualizar por faixa de
# escolaridade da mãe

# Calculando a mediana da escolaridade da mãe
mediana_idades = sinasc_2_limpo.groupby('ESCMAE').median()
mediana_idades

# Calculando a diferença das idades do pai e da mãe e aplicando isso a uma nova
# coluna chamada "DIF"

mediana_idades['DIFIDADES'] = mediana_idades['IDADEPAI'] - mediana_idades['IDADEMAE']
mediana_idades.sort_values('DIFIDADES')

"""#### Agregações"""

# Quais métodos podemos usar dentro do método groupby?

# count() - Contagem dos não missing
# sum() - Soma
# mean() - Média
# median() - Mediana
# std() - Desvio padrão
# var() - Variância
# min() - Mínimo
# max() - Máximo
# prod() - Produto
# first() - Primeiro elemento
# last() - Último elemento

# Criando um novo dataframe apenas com algumas colunas a partir do dataframe
# original

sinasc_novo = sinasc_raw[['IDADEMAE', 'SEXO', 'APGAR1', 'APGAR5', 'PESO',
                     'CONSULTAS', 'DTNASC', 'GESTACAO', 'GRAVIDEZ',
                     'ESCMAE', 'IDADEPAI']].copy()

# Verificando a quantidade de bebês do sexo masculino e do sexo feminino

sinasc_novo.SEXO.value_counts()

# Contando quantas datas de nascimento têm no dataframe, sem incluir repetição.
# Para isso utilizaremos o método nunique(), que faz a contaem de valores únicos.

sinasc_novo.DTNASC.nunique()

"""### Contaegm de data de nascimento (DNASC) e idade da mãe (IDADEMAE)

- Em Python:
"""

sinasc_novo.groupby('DTNASC')['IDADEMAE'].count()

# Ordenando os valores

sinasc_novo.groupby('DTNASC')['IDADEMAE'].count().sort_values(ascending=False)

sinasc_novo.DTNASC.value_counts()

"""- Em SQL:

SELECT DTNASC, count

(IDADEMAE) as contagem

FROM sinasc

GROUP BY DTNASC

ORDER BY contagem DESC

### Qual a idade da mãe (IDADEMAE) por data de nascimento de bebê (DTNASC)?

- Em SQL:

SELECT DTNASC, count

(IDADEMAE) as contagem

FROM sinasc

GROUP BY DTNASC

ORDER BY contagem DESC

- Em Python:
"""

sinasc_novo.groupby('DTNASC')['IDADEMAE'].mean()

# Parâmetro "sort" setado como False não ordena os valores, deixando na ordem que
# eles estão no dataframe

sinasc_novo.groupby('DTNASC', sort=False)['IDADEMAE'].mean()

sinasc_novo.groupby('DTNASC')['IDADEMAE'].mean().sort_values(ascending=False)

"""### Somando as idades das mães por data de nascimento"""

sinasc_novo.groupby('DTNASC')['IDADEMAE'].sum()

"""### Visualizando"""

idade_mae_mediana = sinasc_novo.groupby('DTNASC')['IDADEMAE'].mean()
idade_mae_mediana

idade_mae_mediana.plot(figsize=[18, 6])
plt.ylabel('Média da Idade das Mães')
plt.xlabel('Data de Nascimento')
plt.title('Média da Idade das Mães por Data de Nascimento')

"""### Quantidade de bebês ao longo do ano"""

qtd_bebes_ano = sinasc_novo.groupby('DTNASC')['IDADEMAE'].count()
qtd_bebes_ano

qtd_bebes_ano.plot(figsize=[18, 6])
plt.ylabel('Quantidade de Bebês Nascidos')
plt.xlabel('Data de Nascimento')
plt.title('Quantidade de Bebês por Data de Nascimento')

"""### Quantidade de bebês nascidos por gênero"""

sinasc_novo['SEXO'].value_counts()

sinasc_novo[sinasc_novo['SEXO'] == 'Feminino']

bebes_fem = sinasc_novo[sinasc_novo['SEXO'] == 'Feminino'].groupby('DTNASC')['IDADEMAE'].count()
bebes_masc = sinasc_novo[sinasc_novo['SEXO'] == 'Masculino'].groupby('DTNASC')['IDADEMAE'].count()

bebes_fem.plot(figsize=[18, 6])
bebes_masc.plot()
plt.ylabel('Quantidade de Nascimentos')
plt.xlabel('Data de Nascimento')
plt.title('Quantidade de Nascimentos por Gênero')

"""### Quantidade de bebês nascidos por gênero usando unstack"""

# Podemos fazer um groupby passando duas colunas como chave. Nesse caso, é como
# se estivessemos usando as duas colunas "DTNASC" e "SEXO" como índice,
# selecionando apenas a coluna "IDADEMAE" para ser exibida

# Como não estamos considerando as idades das mães como valores únicos, é como
# se estivessemos contando todas as idades das mães que deram à luz naquele dia,
# ou seja, todas as mães que deram à luz

sinasc_novo.groupby(['DTNASC', 'SEXO'])['IDADEMAE'].count()

sinasc_novo.groupby(['DTNASC', 'SEXO'])['IDADEMAE'].count().unstack()

sinasc_novo.groupby(['DTNASC', 'SEXO'])['IDADEMAE'].count().unstack().plot(figsize=[18, 6])
plt.ylabel('Quantidade de Nascimentos')
plt.xlabel('Data de Nascimento')
plt.title('Quantidade de Nascimentos por Gênero')

"""### Quantos bebês nascem por dia da semana"""

# Alterando o formato da coluna "DTNASC" de object (string) para data

sinasc_novo['DTNASC'] = pd.to_datetime(sinasc_novo['DTNASC'])

# Setando a coluna "DTNASC" como índice, para podermos calcular o dayofweek
# (dia da semana)

sinasc_novo.set_index('DTNASC', inplace=True)

sinasc_novo.index

sinasc_novo.index.dayofweek

# Segunda = 0
# Terça = 1
# Quarta = 2
# Quinta = 3
# Sexta = 4
# Sábado = 5
# Domingo = 6

sinasc_novo['DIADASEMANA'] = sinasc_novo.index.dayofweek

sinasc_novo['DIADASEMANA'].value_counts()

sinasc_novo.groupby('DIADASEMANA')['IDADEMAE'].count()

qtd_nasc_dia_semana = sinasc_novo.groupby('DIADASEMANA')['IDADEMAE'].count()
qtd_nasc_dia_semana.index

fig, ax = plt.subplots(figsize=[18, 6])
qtd_nasc_dia_semana.plot()
ax.set_xticks(qtd_nasc_dia_semana.index)
ax.set_xticklabels(['Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sab', 'Dom'])
plt.ylabel('Quantidade de Nascimentos')
plt.xlabel('Dia da Semana')
plt.title('Quantidade de Nascimentos por Dia da Semana')

"""### Média de peso dos bebês por gênero"""

sinasc_novo.groupby(['DTNASC', 'SEXO'])['PESO'].mean()

sinasc_novo.groupby(['DTNASC', 'SEXO'])['PESO'].mean().unstack()

sinasc_novo.groupby(['DTNASC', 'SEXO'])['PESO'].mean().unstack().plot(figsize=[18, 6])
plt.ylabel('Média de Peso dos Bebês')
plt.xlabel('Data de Nascimento')
plt.title('Média de Peso dos Bebês por Gênero')

"""### Peso do bebê é impactado pelos anos de estudo da mãe ('ESCMAE')?"""

sinasc_novo.groupby(['ESCMAE'])['PESO'].median()

sinasc_novo.groupby(['ESCMAE'])['PESO'].median().sort_values().plot(figsize=[18, 6])
plt.ylabel('Média de Peso dos Bebês')
plt.xlabel('Escolaridade da Mãe')
plt.title('Média de Peso dos Bebês por Escolaridade da Mãe')

"""### Tempo de Gestação (GESTACAO) X Escala APGAR"""

# Quanto maior o número de APGAR do bebê recém nascido, mais saudável ele é
# APGAR1 = primeiro minuto de vida

sinasc_novo.groupby('GESTACAO')['APGAR1'].mean()

sinasc_novo.groupby('GESTACAO')['APGAR1'].mean().sort_values().plot(figsize=[18, 6])
plt.ylabel('Média do APGAR1 do Bebê')
plt.xlabel('Tempo de Gestação')
plt.title('Média do APGAR1 do Bebê por Tempo de Gestação')

sinasc_novo.groupby('GESTACAO')['APGAR5'].mean()

sinasc_novo.groupby('GESTACAO')['APGAR5'].mean().sort_values().plot(figsize=[18, 6])
plt.ylabel('Média do APGAR5 do Bebê')
plt.xlabel('Tempo de Gestação')
plt.title('Média do APGAR5 do Bebê por Tempo de Gestação')