# -*- coding: utf-8 -*-
"""utilize_tabela_pivo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IwcjR944xy4pYukGAGB76cTYu_WxruKJ
"""

import numpy as np
import pandas as pd

sinasc = pd.read_csv('SINASC_RO_2019.csv')

"""### Pivot Table"""

sinasc_2 = sinasc[['ESCMAE', 'PESO', 'IDADEMAE', 'IDADEPAI']].copy()

sinasc_2.head()

# Um exemplo que temos de agrupamento:
# Agrupar pela escolaridade da mãe, ou seja, essa coluna se tornará o novo
# índice do nosso dataframe, e somar as idades das mães de cada faixa

sinasc_2.pivot_table(values='IDADEMAE', # A coluna cujos valores queremos agrupar
                     index='ESCMAE', # Deixando explícito qual vai ser o novo índice
                     aggfunc='sum') # A função que desejamos realizar com esses valores agrupados

sinasc_2.pivot_table(values='IDADEMAE',
                     index='ESCMAE',
                     aggfunc='sum',
                     margins=True)

sinasc_2.pivot_table(values='IDADEMAE',
                     index='ESCMAE',
                     aggfunc='sum',
                     margins=True,
                     margins_name='Total')

pd.pivot_table(data=sinasc_2,
               values='IDADEMAE',
               index='ESCMAE',
               aggfunc='sum',
               margins=True,
               margins_name='Total')

# Categorização das variáveis -> Transformando as variáveis numéricas em
# variáveis categóricas

sinasc_2['IDADEMAE'].describe()

# Criar faixas/grupos de idades
# Por exemplo: de 0 a 18 anos, de 18 a 80 anos
# É possível fazer isso com o método cut()

pd.cut(sinasc_2['IDADEMAE'], bins=[0, 18, 80]).value_counts()

# Método cut() ajuda ao utilizar o pivot_table
# Exemplo de uso
# Criando uma nova variável chamada idade_mae
# Essa é uma variável categórica

idade_mae = pd.cut(sinasc_2['IDADEMAE'], [0, 18, 80])
idade_mae

# Podemos aplicar o pivot_table utilizando essa variável como índice.
# Neste caso, estamos criando um dataframe multi-index.
sinasc_2.pivot_table(values='IDADEPAI', index=['ESCMAE', idade_mae])

# O método qcut permite fazer isso automaticamente

pd.qcut(sinasc_2['IDADEPAI'], 2) # Quebrando em dois percentis, ou seja, na
# mediana

# Podemos também utilizar a variável criada a partir do qcut com o pivot_table

idade_pai = pd.qcut(sinasc_2['IDADEPAI'], 2)
idade_pai

sinasc_2.pivot_table(values='PESO',
                     index=['ESCMAE', idade_mae],
                     columns=[idade_pai], # Utilizando essa variável (faixas) como quebra de categoria
                     aggfunc='median')

sinasc_2.pivot_table(values='PESO',
                     index=['ESCMAE', idade_mae],
                     columns=[idade_pai],
                     aggfunc=['mean', 'median'],
                     dropna=True)

# E também um dicionário
sinasc_2.pivot_table(values=['PESO', 'IDADEPAI'],
                     index=['ESCMAE', idade_mae],
                     columns=[idade_pai],
                     aggfunc={
                         'PESO': ['mean', 'median'],
                         'IDADEPAI': [np.max, np.min]
                     },
                     dropna=True)

sinasc_2.pivot_table(values=['PESO', 'IDADEPAI'],
                     index=['ESCMAE', idade_mae],
                     columns=[idade_pai],
                     aggfunc={
                         'PESO': [('media', 'mean'), ('mediana','median')],
                         'IDADEPAI': [('maximo', np.max), ('minimo', np.min)]
                     },
                     dropna=True)

